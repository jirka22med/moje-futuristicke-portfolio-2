// conzol-log-beta-1.js - Vylep≈°en√° verze s komplexn√≠m logov√°n√≠m a filtrov√°n√≠m pro Ji≈ô√≠ka
// Nyn√≠ s nov√Ωm, automaticky vytv√°≈ôen√Ωm tlaƒç√≠tkem pro spolehliv√© otev√≠r√°n√≠ modalu.
// D≈ÆLE≈ΩIT√â: Tento soubor NYN√ç VKL√ÅD√Å HTML a CSS modalu p≈ô√≠mo do str√°nky s !important pro vysokou prioritu.
// V≈°echny ID a t≈ô√≠dy modalu byly p≈ôejmenov√°ny na 'jirik-' prefix, aby se zabr√°nilo konflikt≈Øm.
// Opravena logika zobrazen√≠ modalu s pou≈æit√≠m opacity a visibility pro plynul√© p≈ôechody.

// Pou≈æijeme Immediately Invoked Function Expression (IIFE) pro vytvo≈ôen√≠ vlastn√≠ho rozsahu
// T√≠m se vy≈ôe≈°√≠ chyba "Illegal return statement" a zajist√≠ jednor√°zov√° inicializace.
(function() {
    // Glob√°ln√≠ flag pro zaji≈°tƒõn√≠ jednor√°zov√© inicializace cel√©ho skriptu
    if (window.conzolLogBeta1Initialized) {
        return; // Tento return je nyn√≠ leg√°ln√≠ uvnit≈ô IIFE
    }
    window.conzolLogBeta1Initialized = true;


    document.addEventListener('DOMContentLoaded', () => {
        // Z√°loha p≈Øvodn√≠ch konzolov√Ωch metod - mus√≠ b√Ωt uvnit≈ô DOMContentLoaded nebo IIFE, pokud se pou≈æ√≠v√° `return`
        const originalConsole = {
            log: console.log,
            warn: console.warn,
            error: console.error,
            info: console.info,
            debug: console.debug,
        };

        // Pravidlo 27: Upozornƒõn√≠ na rizika - informujeme o p≈ôepisu konzolov√Ωch metod.
        // T√≠mto p≈ôepisujeme standardn√≠ konzolov√© metody, abychom mohli zachyt√°vat a filtrovat logy.
        // Ujistƒõte se, ≈æe tato √∫prava vyhovuje va≈°im pot≈ôeb√°m pro debugov√°n√≠ a sledov√°n√≠, Ji≈ô√≠ku.
        if (typeof console !== 'undefined' && originalConsole.warn) { // Pou≈æijeme originalConsole.warn
            originalConsole.warn('üöÄ Conzol-log-beta-1.js: Inicializace vylep≈°en√©ho syst√©mu pro z√°znam konzolov√Ωch log≈Ø. P≈ôepisuji standardn√≠ konzolov√© metody (log, warn, error, info, debug) pro komplexn√≠ zachycen√≠ a filtrov√°n√≠ zpr√°v. Toto je navr≈æeno pro hlub≈°√≠ vhled do bƒõhu aplikace, ale mƒõjte na pamƒõti, ≈æe to ovliv≈àuje glob√°ln√≠ objekt `console`.');
        }

        // Pole pro ukl√°d√°n√≠ z√°znam≈Ø konzole
        const logEntries = [];
        const maxLogEntries = 1000; // Maxim√°ln√≠ poƒçet z√°znam≈Ø pro udr≈æen√≠ v√Ωkonu

        // Keywords, kter√© maj√≠ b√Ωt filtrov√°ny (pokud nejsou v allowedPhrases)
        const filterKeywords = [
            'Supabase Auth State Change:', // Generick√© zpr√°vy Supabase
            'Supabase library not loaded',
            'Firebase Firestore √∫spƒõ≈°nƒõ inicializov√°n.',
            'Chyba p≈ôi inicializaci Firebase Firestore:',
            'Kritick√° chyba: Knihovna Firebase Firestore se nenaƒçetla.',
            'Kritick√° chyba: Knihovna Supabase se nenaƒçetla.',
            'Zmƒõna velikosti okna, aktualizuji styly obr√°zk≈Ø.',
            'Realtime aktualizace z Firestore:',
            'Data naƒçtena z Firestore.',
            '≈Ω√°dn√° data v Firestore, pou≈æiji v√Ωchoz√≠ lok√°ln√≠ data.',
            'Hlavn√≠ dokument v Firestore neexistuje, nebo byl smaz√°n.',
            'Chyba p≈ôi poslouch√°n√≠ realtime aktualizac√≠:',
            'Aplikace inicializov√°na.',
            'Nelze ulo≈æit URL data - u≈æivatel nen√≠ p≈ôihl√°≈°en',
            'URL data pro',
            'Aplikuji URL data pro',
            'Naƒç√≠t√°m data z cloudu...',
            'Ukl√°d√°m data do cloudu...',
            'Ma≈æu data z cloudu...',
            'Chyb√≠ data pro portfolio polo≈æku s ID:',
            'Inicializace vylep≈°en√©ho syst√©mu pro z√°znam konzolov√Ωch log≈Ø.',
            'üöÄ Conzol-log.js: Inicializace vylep≈°en√©ho syst√©mu pro z√°znam konzolov√Ωch log≈Ø.',
            'console.error("Loading indicator element not found!");',
            'console.error("Chyba p≈ôi z√≠sk√°v√°n√≠ Supabase session:", error);',
            'Chyba p≈ôi ukl√°d√°n√≠ URL dat:',
            'Chyba p≈ôi ukl√°d√°n√≠ do Firestore:',
            'Chyba p≈ôi naƒç√≠t√°n√≠ z Firestore:',
            'Nepoda≈ôilo se synchronizovat data v re√°ln√©m ƒçase:',
            'Nepoda≈ôilo se ulo≈æit data do cloudu:',
            'Nepoda≈ôilo se naƒç√≠st data z cloudu:',
            'Nepoda≈ôilo se vymazat data z cloudu:',
            'Chyba p≈ôi odhla≈°ov√°n√≠:',
            'Chyba p≈ôi registraci:',
            'Chyba p≈ôi p≈ôihla≈°ov√°n√≠:',
            'Inicializace editoru HTML',
            ' üìä Celkem obr√°zk≈Ø',
            ' üìç Aktu√°ln√≠ index',
            'üéØ Aktu√°ln√≠ obr√°zek ',
            ' ‚úÖ Index je platn√Ω',

            ' currentModalImageIndex',
            ' üìã Seznam v≈°ech obr√°zk≈Ø',
            'üé≠ APR√çLOV√Å NAVIGACE START: direction=1',

'üìç P≈ôed: currentModalImageIndex=0',

'üìç Po: currentModalImageIndex=0',

'üé≠ APR√çL√Å NAVIGACE END',
        ];

        // Fr√°ze, kter√© maj√≠ v≈ædy proj√≠t, i kdy≈æ obsahuj√≠ filtrovan√° slova
        const allowedPhrases = [
            'U≈æivatel je p≈ôihl√°≈°en p≈ôes Supabase:',
            'U≈æivatel nen√≠ p≈ôihl√°≈°en p≈ôes Supabase.',
            'Registrace probƒõhla √∫spƒõ≈°nƒõ!',
            'Zkontrolujte sv≈Øj email pro potvrzen√≠ registrace.',
            'Byli jste √∫spƒõ≈°nƒõ odhl√°≈°eni.',
            
        ];

        /**
         * Kontroluje, zda m√° b√Ωt zpr√°va filtrov√°na.
         * @param {string} message - Zpr√°va konzole.
         * @returns {boolean} True, pokud m√° b√Ωt zpr√°va filtrov√°na (skryta).
         */
        function shouldFilter(message) {
            const lowerCaseMessage = message.toLowerCase();

            // 1. V≈ædy povolit explicitnƒõ povolen√© fr√°ze
            for (const phrase of allowedPhrases) {
                if (lowerCaseMessage.includes(phrase.toLowerCase())) {
                    return false; // NEFILTROVAT, proto≈æe je to povolen√° fr√°ze
                }
            }

            // 2. Filtrovat generick√© zpr√°vy podle kl√≠ƒçov√Ωch slov
            for (const keyword of filterKeywords) {
                if (lowerCaseMessage.includes(keyword.toLowerCase())) {
                    return true; // FILTROVAT, proto≈æe obsahuje filtrovan√© slovo a nen√≠ povolen√°
                }
            }

            return false; // Pokud nen√≠ v ≈æ√°dn√© kategorii, nefiltrujeme
        }

        /**
         * P≈ôid√° z√°znam do pole logEntries a aktualizuje zobrazen√≠.
         * @param {string} type - Typ zpr√°vy (log, warn, error, info, debug).
         * @param {string} message - Zpr√°va.
         * @param {Array} args - Dal≈°√≠ argumenty logu.
         */
        function addLogEntry(type, message, args) {
            // Kontrola, zda zpr√°vu filtrovat
            if (shouldFilter(message)) {
                return;
            }

            const timestamp = new Date();
            const fullMessage = message + (args.length > 0 ? ' ' + args.map(a => typeof a === 'object' ? JSON.stringify(a) : String(a)).join(' ') : '');

            logEntries.push({
                timestamp: timestamp,
                type: type,
                message: fullMessage,
            });

            // Omezen√≠ poƒçtu z√°znam≈Ø
            if (logEntries.length > maxLogEntries) {
                logEntries.shift(); // Odebere nejstar≈°√≠ z√°znam
            }

            // Upravil jsem tuto ƒç√°st, aby nebyla tak ukecan√°, pokud to nen√≠ nutn√©
            // originalConsole.log(`Log added: ${message.substring(0, 50)}...`); // Men≈°√≠ logov√°n√≠ pro p≈ôid√°n√≠
            updateLogDisplay();
        }

        // P≈ôep√≠≈°eme standardn√≠ konzolov√© metody
        console.log = function(...args) {
            originalConsole.log.apply(console, args);
            addLogEntry('LOG', String(args[0]), args.slice(1));
        };
        console.warn = function(...args) {
            originalConsole.warn.apply(console, args);
            addLogEntry('WARN', String(args[0]), args.slice(1));
        };
        console.error = function(...args) {
            originalConsole.error.apply(console, args);
            addLogEntry('ERROR', String(args[0]), args.slice(1));
        };
        console.info = function(...args) {
            originalConsole.info.apply(console, args);
            addLogEntry('INFO', String(args[0]), args.slice(1));
        };
        console.debug = function(...args) {
            originalConsole.debug.apply(console, args);
            addLogEntry('DEBUG', String(args[0]), args.slice(1));
        };

        // 1. HTML struktura pro modaln√≠ okno s tabulkou log≈Ø (vlo≈æen√° p≈ô√≠mo v JS)
        const jirikModalHTML = `
            <div id="jirik-modal" class="jirik-modal-overlay">
                <div class="jirik-modal-content">
                    <span class="jirik-close-button" id="jirik-close-button">&times;</span>
                    <h5>V√Ωpis Konzole (Ji≈ô√≠k)</h5>
                    <div class="jirik-log-controls">
                        <button id="jirik-clear-button" class="jirik-button jirik-btn-danger">Vyƒçistit log</button>
                        <button id="jirik-export-button" class="jirik-button jirik-btn-secondary">Extrahovat log (HTML)</button>
                        <div class="jirik-log-stats">
                            <span id="jirik-log-count">Z√°znamy: 0</span>
                        </div>
                    </div>
                    <div class="jirik-log-table-container">
                        <table id="jirik-log-table">
                            <thead>
                                <tr>
                                    <th>ƒåas</th>
                                    <th>Typ</th>
                                    <th>Zpr√°va</th>
                                    <th>Akce</th>
                                </tr>
                            </thead>
                            <tbody id="jirik-table-body">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        `;

        // 2. CSS styly pro modal (vlo≈æen√© p≈ô√≠mo v JS s !important a upraven√Ωm z-indexem)
        const jirikModalCSS = `
            /* Z√°kladn√≠ styly pro modal (P≈ôejmenov√°no na jirik-modal-overlay) */
            .jirik-modal-overlay {
                position: fixed !important; /* Z≈Øst√°v√° na m√≠stƒõ, i kdy≈æ se str√°nka scrolluje */
                z-index: 999999 !important; /* Zv√Ω≈°eno na extr√©mnƒõ vysokou hodnotu */
                left: 0 !important;
                top: 0 !important;
                width: 100% !important; /* Pln√° ≈°√≠≈ôka */
                height: 100% !important; /* Pln√° v√Ω≈°ka */
                overflow: auto !important; /* Povolit scrollov√°n√≠, pokud je obsah p≈ô√≠li≈° velk√Ω */
                background-color: rgba(0,0,0,0.7) !important; /* Ztmav√≠ pozad√≠ */
                justify-content: center !important; /* Centrov√°n√≠ obsahu */
                align-items: center !important; /* Centrov√°n√≠ obsahu */
                padding-top: 50px !important; /* Mezera odshora */

                /* Kl√≠ƒçov√© pro zobrazen√≠/skryt√≠ s p≈ôechodem */
                display: flex !important; /* V≈ædy flex, pro zarovn√°n√≠ obsahu */
                opacity: 0 !important; /* Skryt√© ve v√Ωchoz√≠m nastaven√≠ */
                visibility: hidden !important; /* Skryt√© ve v√Ωchoz√≠m nastaven√≠ */
                transition: opacity 0.3s ease, visibility 0.3s ease !important;
                backdrop-filter: blur(5px) !important; /* P≈ôid√°no z tv√©ho funkƒçn√≠ho k√≥du */
            }

            .jirik-modal-overlay.jirik-visible {
                opacity: 1 !important;
                visibility: visible !important;
            }

            .jirik-modal-content {
                background-color: #2a2a2a !important;
                margin: auto !important; /* Vycentrovat horizont√°lnƒõ */
                padding: 25px !important;
                border: 1px solid #555 !important;
                width: 90% !important; /* ≈†√≠≈ôka obsahu */
                max-width: 1200px !important; /* Maxim√°ln√≠ ≈°√≠≈ôka */
                border-radius: 8px !important;
                box-shadow: 0 5px 15px rgba(0,0,0,0.5) !important;
                position: relative !important;
                color: #e0e0e0 !important;
                display: flex !important;
                flex-direction: column !important;
                max-height: 90vh !important; /* Omezen√≠ v√Ω≈°ky modalu */
            }

            .jirik-close-button {
                color: #aaa !important;
                float: right !important;
                font-size: 28px !important;
                font-weight: bold !important;
                position: absolute !important;
                right: 20px !important;
                top: 10px !important;
                cursor: pointer !important;
            }

            .jirik-close-button:hover,
            .jirik-close-button:focus {
                color: #fefefe !important;
                text-decoration: none !important;
                cursor: pointer !important;
            }

            h5 {
                color: #00ffff !important;
                text-align: center !important;
                margin-top: 0 !important;
                margin-bottom: 20px !important;
                font-size: 1.8em !important;
            }

            .jirik-log-controls {
                display: flex !important;
                flex-wrap: wrap !important;
                justify-content: center !important;
                gap: 15px !important;
                margin-bottom: 20px !important;
                padding-bottom: 15px !important;
                border-bottom: 1px solid #444 !important;
            }

            .jirik-log-controls .jirik-button {
                padding: 10px 20px !important;
                border: none !important;
                border-radius: 5px !important;
                cursor: pointer !important;
                font-size: 1em !important;
                transition: background-color 0.3s ease !important;
            }

            .jirik-log-controls .jirik-btn-danger {
                background-color: #dc3545 !important;
                color: white !important;
            }
            .jirik-log-controls .jirik-btn-danger:hover {
                background-color: #c82333 !important;
            }

            .jirik-log-controls .jirik-btn-secondary {
                background-color: #6c757d !important;
                color: white !important;
            }
            .jirik-log-controls .jirik-btn-secondary:hover {
                background-color: #5a6268 !important;
            }

            .jirik-log-stats {
                display: flex !important;
                align-items: center !important;
                font-size: 1em !important;
                color: #bbb !important;
            }

            .jirik-log-table-container {
                flex-grow: 1 !important; /* Povol√≠ tabulce zab√≠rat dostupn√© m√≠sto */
                overflow-y: auto !important; /* Umo≈æn√≠ scrollov√°n√≠ tabulky */
                background-color: #1a1a1a !important;
                border-radius: 5px !important;
                padding: 10px !important;
            }

            #jirik-log-table {
                width: 100% !important;
                border-collapse: collapse !important;
                font-size: 0.9em !important;
                color: #f0f0f0 !important;
            }

            #jirik-log-table th,
            #jirik-log-table td {
                border: 1px solid #333 !important;
                padding: 10px !important;
                text-align: left !important;
                vertical-align: top !important;
            }

            #jirik-log-table th {
                background-color: #3a3a3a !important;
                color: #00ffff !important;
                position: sticky !important; /* Sticky hlaviƒçka */
                top: 0 !important;
                z-index: 1 !important;
            }

            #jirik-log-table tbody tr:nth-child(even) {
                background-color: #222 !important;
            }
            #jirik-log-table tbody tr:hover {
                background-color: #333 !important;
            }

            .log-type-log-text { color: #87ceeb !important; } /* SkyBlue */
            .log-type-warn-text { color: #ffcc00 !important; } /* Amber */
            .log-type-error-text { color: #ff6347 !important; } /* Tomato */
            .log-type-info-text { color: #98fb98 !important; } /* PaleGreen */
            .log-type-debug-text { color: #dda0dd !important; } /* Plum */

            .jirik-log-time-cell {
                white-space: nowrap !important; /* Zabra≈àuje zalomen√≠ ƒçasu */
                min-width: 150px !important;
            }

            .jirik-log-type-cell {
                text-transform: uppercase !important;
                font-weight: bold !important;
                min-width: 80px !important;
                text-align: center !important;
            }

            .jirik-log-message-cell {
             
            }

            .jirik-copy-log-btn {
                background: #555 !important;
                color: white !important;
                border: none !important;
                padding: 5px 10px !important;
                border-radius: 3px !important;
                cursor: pointer !important;
                font-size: 0.8em !important;
                margin-left: 10px !important;
                transition: background-color 0.3s ease !important;
            }
            .jirik-copy-log-btn:hover {
                background: #777 !important;
            }

            /* ≈†√≠≈ôky sloupc≈Ø */
            #jirik-log-table th:nth-child(1),
            #jirik-log-table td:nth-child(1) {
                width: 50% !important; /* ƒåas */
                min-width: 150px !important; /* Minim√°ln√≠ ≈°√≠≈ôka pro ƒças */
                white-space: nowrap !important;
            }
            #jirik-log-table th:nth-child(2),
            #jirik-log-table td:nth-child(2) {
                width: 25% !important; /* Typ */
                min-width: 150px !important; /* Minim√°ln√≠ ≈°√≠≈ôka pro typ */
                white-space: nowrap !important;
            }
            #jirik-log-table th:nth-child(3),
            #jirik-log-table td:nth-child(3) {
                width: 120% !important; /* Zpr√°va */
                min-width: 150px !important; /* Minim√°ln√≠ ≈°√≠≈ôka pro typ */
                white-space: nowrap !important;
            }
             #jirik-log-table th:nth-child(4),
            #jirik-log-table td:nth-child(4) {
                width: 25% !important; /* Akce */
                min-width: 150px !important;
                white-space: nowrap !important;
            }

        `;
        
        originalConsole.log('üîç Pokou≈°√≠m se vlo≈æit HTML modalu do dokumentu...');
        // Vlo≈æen√≠ HTML modalu do tƒõla dokumentu
        document.body.insertAdjacentHTML('beforeend', jirikModalHTML);
        originalConsole.log('‚úÖ HTML modalu (jirik-modal) by mƒõlo b√Ωt vlo≈æeno.');

        originalConsole.log('üîç Pokou≈°√≠m se vlo≈æit CSS styly modalu do hlaviƒçky dokumentu...');
        // Vlo≈æen√≠ CSS styl≈Ø do hlaviƒçky dokumentu
        const styleElement = document.createElement('style');
        styleElement.textContent = jirikModalCSS;
        document.head.appendChild(styleElement);
        originalConsole.log('‚úÖ CSS styly modalu (jirik-modal) by mƒõly b√Ωt vlo≈æeny do <head>.');


        originalConsole.log('üîç Pokou≈°√≠m se z√≠skat reference na elementy modalu...');
        // Z√≠sk√°n√≠ DOM element≈Ø modalu - nyn√≠ by mƒõly b√Ωt v DOMu
        const jirikModal = document.getElementById('jirik-modal');
        const closeJirikModalBtn = document.getElementById('jirik-close-button');
        const clearJirikLogBtn = document.getElementById('jirik-clear-button');
        const exportJirikLogBtn = document.getElementById('jirik-export-button');
        // Kontrola, zda jirikModal skuteƒçnƒõ existuje
        const jirikLogTableBody = jirikModal ? jirikModal.querySelector('#jirik-log-table tbody') : null;
        const jirikLogCountSpan = document.getElementById('jirik-log-count');

        // Detailn√≠ logov√°n√≠ nalezen√Ωch element≈Ø
        originalConsole.log(`- jirikModal (ID 'jirik-modal'): ${jirikModal ? 'Nalezen' : 'NENALEZEN'}`);
        originalConsole.log(`- closeJirikModalBtn (ID 'jirik-close-button'): ${closeJirikModalBtn ? 'Nalezen' : 'NENALEZEN'}`);
        originalConsole.log(`- clearJirikLogBtn (ID 'jirik-clear-button'): ${clearJirikLogBtn ? 'Nalezen' : 'NENALEZEN'}`);
        originalConsole.log(`- exportJirikLogBtn (ID 'jirik-export-button'): ${exportJirikLogBtn ? 'Nalezen' : 'NENALEZEN'}`);
        originalConsole.log(`- jirikLogTableBody (tbody uvnit≈ô jirik-log-table): ${jirikLogTableBody ? 'Nalezen' : 'NENALEZEN'}`);
        originalConsole.log(`- jirikLogCountSpan (ID 'jirik-log-count'): ${jirikLogCountSpan ? 'Nalezen' : 'NENALEZEN'}`);


        // ƒå√ÅST: Vytvo≈ôen√≠ a vlo≈æen√≠ hlavn√≠ho tlaƒç√≠tka do urƒçen√©ho kontejneru
        originalConsole.log('üîç Pokou≈°√≠m se naj√≠t kontejner pro hlavn√≠ tlaƒç√≠tko...');
        const dataManagementContainer = document.querySelector('.function-setupDataManagement .data-management-container');

        if (dataManagementContainer) {
            originalConsole.log('‚úÖ Kontejner pro hlavn√≠ tlaƒç√≠tko nalezen.');
            let openJirikModalBtn = document.getElementById('jirik-open-modal-btn');

            // Vytvo≈ô√≠me tlaƒç√≠tko, pouze pokud je≈°tƒõ neexistuje v DOMu
            if (!openJirikModalBtn) {
                originalConsole.log('üîç Tlaƒç√≠tko pro hlavn√≠ konzoli neexistuje, vytv√°≈ô√≠m ho...');
                openJirikModalBtn = document.createElement('button');
                openJirikModalBtn.id = 'jirik-open-modal-btn';
                openJirikModalBtn.className = 'button custom-button'; // P≈ôid√°me tv√© t≈ô√≠dy
                openJirikModalBtn.textContent = 'Zobrazit konzoli (Ji≈ô√≠k)';
                
                dataManagementContainer.appendChild(openJirikModalBtn);
                originalConsole.log('‚úÖ Tlaƒç√≠tko pro otev≈ôen√≠ konzole (Ji≈ô√≠k) bylo √∫spƒõ≈°nƒõ vytvo≈ôeno a nav√°z√°no do .function-setupDataManagement .data-management-container!');
            } else {
                originalConsole.log('‚ÑπÔ∏è Tlaƒç√≠tko pro hlavn√≠ konzoli ji≈æ existuje, p≈ôeskoƒçuji vytv√°≈ôen√≠.');
            }
            
            // P≈ôid√°me event listener POUZE JEDNOU
            if (openJirikModalBtn && !openJirikModalBtn.hasAttribute('data-console-listener-bound')) {
                originalConsole.log('üîç P≈ôipojuji event listener k hlavn√≠mu tlaƒç√≠tku konzole...');
                openJirikModalBtn.addEventListener('click', (e) => {
                    e.preventDefault(); 
                    e.stopPropagation();
                    originalConsole.log('üü¢ Hlavn√≠ tlaƒç√≠tko konzole bylo kliknuto!');
                    if (jirikModal) { // Kontrola, zda modal existuje
                        originalConsole.log(`üü¢ P≈ôid√°v√°m t≈ô√≠du 'jirik-visible' modalu (ID: ${jirikModal.id}). Aktu√°ln√≠ t≈ô√≠dy: ${jirikModal.className}`);
                        jirikModal.classList.add('jirik-visible'); // Zobrazit modal pomoc√≠ t≈ô√≠dy
                        originalConsole.log(`‚úÖ T≈ô√≠da 'jirik-visible' p≈ôid√°na. Aktu√°ln√≠ t≈ô√≠dy: ${jirikModal.className}`);
                        updateLogDisplay(); // Aktualizovat zobrazen√≠ p≈ôi otev≈ôen√≠
                        originalConsole.log('üîÑ updateLogDisplay vol√°n po kliknut√≠ na hlavn√≠ tlaƒç√≠tko.');
                    } else {
                        originalConsole.error('‚ùå Conzol-log-beta-1.js: Modal s ID "jirik-modal" nebyl nalezen v DOMu p≈ôi pokusu o zobrazen√≠! Ujistƒõte se, ≈æe HTML modalu je vlo≈æeno.');
                    }
                });
                openJirikModalBtn.setAttribute('data-console-listener-bound', 'true'); // Oznaƒç√≠me, ≈æe listener je nav√°z√°n
                originalConsole.log('üîó Event listener pro hlavn√≠ tlaƒç√≠tko konzole (Ji≈ô√≠k) byl √∫spƒõ≈°nƒõ p≈ôipojen.');
            } else {
                originalConsole.log('‚ÑπÔ∏è Event listener pro hlavn√≠ tlaƒç√≠tko konzole ji≈æ byl p≈ôipojen, p≈ôeskoƒçuji.');
            }

        } else {
            // Fallback pro p≈ô√≠pad, ≈æe c√≠lov√Ω kontejner pro hlavn√≠ tlaƒç√≠tko neexistuje
            originalConsole.error('Conzol-log-beta-1.js: C√≠lov√Ω div pro hlavn√≠ tlaƒç√≠tko (.function-setupDataManagement .data-management-container) nebyl nalezen. Tlaƒç√≠tko nebude vytvo≈ôeno na specifick√©m m√≠stƒõ.');
        }

        // NOV√Å ƒå√ÅST: Nav√°z√°n√≠ listeneru na z√°lo≈æn√≠ tlaƒç√≠tko (jirik-manual-opener-btn)
        originalConsole.log('üîç Pokou≈°√≠m se naj√≠t z√°lo≈æn√≠ tlaƒç√≠tko "jirik-manual-opener-btn"...');
        const jirikManualOpenerBtn = document.getElementById('jirik-manual-opener-btn');
        if (jirikManualOpenerBtn) {
            originalConsole.log('‚úÖ Z√°lo≈æn√≠ tlaƒç√≠tko "jirik-manual-opener-btn" nalezeno.');
            if (!jirikManualOpenerBtn.hasAttribute('data-console-listener-bound-manual')) {
                originalConsole.log('üîç P≈ôipojuji event listener k z√°lo≈æn√≠mu tlaƒç√≠tku konzole...');
                jirikManualOpenerBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    originalConsole.log('üü¢ Z√°lo≈æn√≠ tlaƒç√≠tko konzole bylo kliknuto! Vol√°m window.openJirikModal().');
                    // Vol√°me glob√°ln√≠ funkci pro otev≈ôen√≠ modalu
                    window.openJirikModal(); // Vol√°me p≈ôejmenovanou glob√°ln√≠ funkci
                });
                jirikManualOpenerBtn.setAttribute('data-console-listener-bound-manual', 'true');
                originalConsole.log('üîó Event listener pro z√°lo≈æn√≠ tlaƒç√≠tko "jirik-manual-opener-btn" byl √∫spƒõ≈°nƒõ p≈ôipojen.');
            } else {
                originalConsole.log('‚ÑπÔ∏è Event listener pro z√°lo≈æn√≠ tlaƒç√≠tko ji≈æ byl p≈ôipojen, p≈ôeskoƒçuji.');
            }
        } else {
            originalConsole.warn('Conzol-log-beta-1.js: Z√°lo≈æn√≠ tlaƒç√≠tko s ID "jirik-manual-opener-btn" nebylo nalezeno. Pokud ho oƒçek√°v√°te, zkontrolujte HTML.');
        }

        
        // Funkce pro aktualizaci zobrazen√≠ log≈Ø v tabulce
        function updateLogDisplay() {
            // originalConsole.log('üîÑ Spou≈°t√≠m updateLogDisplay...'); // Opakovan√© logy, kter√© mohou zahlcovat
            // KL√çƒåOV√Å KONTROLA: Zaji≈°tƒõn√≠, ≈æe element existuje, ne≈æ se s n√≠m pracuje
            if (!jirikLogTableBody) {
                 originalConsole.error('‚ùå Chyba: Element pro tƒõlo tabulky log≈Ø (jirik-table-body) nebyl nalezen. Ujistƒõte se, ≈æe HTML modalu je v DOMu.');
                 return;
            }
            // originalConsole.log('‚úÖ Element jirik-table-body nalezen, vyƒçi≈°≈•uji jeho obsah.'); // Opakovan√© logy
            jirikLogTableBody.innerHTML = ''; // Vyƒçistit st√°vaj√≠c√≠ z√°znamy
            
            // originalConsole.log(`üìä Zpracov√°v√°m ${logEntries.length} log z√°znam≈Ø.`); // Opakovan√© logy
            logEntries.forEach((entry, index) => {
                const row = jirikLogTableBody.insertRow();
                row.classList.add(`log-type-${entry.type.toLowerCase()}`); // P≈ôid√° t≈ô√≠du pro styling
                row.title = entry.message; // Titulek pro zobrazen√≠ cel√© zpr√°vy p≈ôi najet√≠ my≈°√≠

                // ƒåas - ZJEDNODU≈†EN√ù FORM√ÅT BEZ MILISEKUND
                const timeCell = row.insertCell();
                timeCell.classList.add('jirik-log-time-cell');
                timeCell.textContent = entry.timestamp.toLocaleString('cs-CZ', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                });

                // Typ
                const typeCell = row.insertCell();
                typeCell.classList.add('jirik-log-type-cell', `log-type-${entry.type.toLowerCase()}-text`);
                typeCell.textContent = entry.type;

                // Zpr√°va
                const messageCell = row.insertCell();
                messageCell.classList.add('jirik-log-message-cell');
                messageCell.textContent = entry.message;

                // Akce (kop√≠rov√°n√≠)
                const actionCell = row.insertCell();
                const copyBtn = document.createElement('button');
                copyBtn.textContent = 'Kop√≠rovat';
                copyBtn.classList.add('jirik-copy-log-btn');
                copyBtn.onclick = () => {
                    navigator.clipboard.writeText(entry.message).then(() => {
                        originalConsole.info('Zpr√°va z logu zkop√≠rov√°na!');
                    }).catch(err => {
                        originalConsole.error('Nepoda≈ôilo se zkop√≠rovat zpr√°vu:', err);
                    });
                };
                actionCell.appendChild(copyBtn); // D≈Øle≈æit√©: Tady se tlaƒç√≠tko skuteƒçnƒõ p≈ôid√°v√°!
            });
            // KL√çƒåOV√Å KONTROLA: Zaji≈°tƒõn√≠, ≈æe jirikLogCountSpan existuje
            if (jirikLogCountSpan) {
                // originalConsole.log(`üìä Aktualizuji poƒçet z√°znam≈Ø: ${logEntries.length}`); // Opakovan√© logy
                jirikLogCountSpan.textContent = `Z√°znamy: ${logEntries.length}`;
            } else {
                originalConsole.warn('ü§î Element pro poƒç√≠t√°n√≠ log≈Ø (jirik-log-count) nebyl nalezen.');
            }
            
            // Rolov√°n√≠ na konec logu
            const tableContainer = jirikLogTableBody.parentElement;
            if (tableContainer) {
                // originalConsole.log('‚¨áÔ∏è Roluji tabulku log≈Ø na konec.'); // Opakovan√© logy
                tableContainer.scrollTop = tableContainer.scrollHeight;
            }
        }

        originalConsole.log('üîç P≈ôipojuji event listenery pro tlaƒç√≠tka modalu...');

        // Event listener pro tlaƒç√≠tko zav≈ô√≠t
        if (closeJirikModalBtn) { // Kontrola null
            closeJirikModalBtn.addEventListener('click', () => {
                originalConsole.log('üîµ Tlaƒç√≠tko pro zav≈ôen√≠ modalu kliknuto.');
                jirikModal.classList.remove('jirik-visible'); // Skr√Ωt modal pomoc√≠ t≈ô√≠dy
                originalConsole.log('‚úÖ Modal (Ji≈ô√≠k) skryt.');
            });
        } else {
            originalConsole.error('‚ùå Tlaƒç√≠tko pro zav≈ôen√≠ modalu (jirik-close-button) nebylo nalezeno!');
        }

        // Event listener pro zav≈ôen√≠ modalu kliknut√≠m mimo obsah
        if (jirikModal) { // Kontrola null
            window.addEventListener('click', (event) => {
                if (event.target === jirikModal) {
                    originalConsole.log('üîµ Kliknuto mimo obsah modalu (jirik-modal-overlay), zav√≠r√°m modal.');
                    jirikModal.classList.remove('jirik-visible'); // Skr√Ωt modal pomoc√≠ t≈ô√≠dy
                    originalConsole.log('‚úÖ Modal (Ji≈ô√≠k) skryt po kliknut√≠ mimo.');
                }
            });
        } else {
            originalConsole.error('‚ùå Overlay modalu (jirik-modal) nebylo nalezeno pro event listener mimo kliknut√≠!');
        }

        // Event listener pro vyƒçi≈°tƒõn√≠ log≈Ø
        if (clearJirikLogBtn) { // Kontrola null
            clearJirikLogBtn.addEventListener('click', () => {
                originalConsole.log('üîµ Tlaƒç√≠tko pro vyƒçi≈°tƒõn√≠ log≈Ø kliknuto. Potvrzuji akci...');
                const confirmed = confirm("Opravdu chcete vyƒçistit v≈°echny z√°znamy z konzole?"); // Pou≈æ√≠v√°me standardn√≠ confirm
                if (confirmed) {
                    logEntries.length = 0; // Vyma≈æe pole
                    updateLogDisplay();
                    originalConsole.log('‚úÖ Konzolov√Ω log byl vyƒçi≈°tƒõn Ji≈ô√≠ku!');
                } else {
                    originalConsole.log('‚ÑπÔ∏è Vyƒçi≈°tƒõn√≠ log≈Ø zru≈°eno.');
                }
            });
        } else {
            originalConsole.error('‚ùå Tlaƒç√≠tko pro vyƒçi≈°tƒõn√≠ log≈Ø (jirik-clear-button) nebylo nalezeno!');
        }

        // Event listener pro export log≈Ø do HTML souboru
        if (exportJirikLogBtn) { // Kontrola null
            exportJirikLogBtn.addEventListener('click', () => {
                originalConsole.log('üîµ Tlaƒç√≠tko pro export log≈Ø kliknuto.');
                const timestamp = new Date().toLocaleString('cs-CZ').replace(/[,: ]/g, '-');
                const filename = `jirik-console-log-${timestamp}.html`;

                const htmlContent = `<!DOCTYPE html>
<html lang="cs">
<head>
    <meta charset="UTF-8">
    <title>V√Ωpis Konzole - ${new Date().toLocaleString('cs-CZ')}</title>
    <style>
        body { font-family: Arial, sans-serif; background: #1a1a1a; color: #f0f0f0; padding: 20px; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #444; padding: 10px; text-align: left; }
        th { background-color: #3a3a3a; color: #00ffff; }
        tr:nth-child(even) { background-color: #222; }
    </style>
</head>
<body>
    <h1>V√Ωpis Konzole</h1>
    <p>Exportov√°no: ${new Date().toLocaleString('cs-CZ')}</p>
    <table>
        <thead><tr><th>ƒåas</th><th>Typ</th><th>Zpr√°va</th></tr></thead>
        <tbody>
        ${logEntries.map(entry => `
            <tr>
                <td>${entry.timestamp.toLocaleString('cs-CZ', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                })}</td>
                <td>${entry.type}</td>
                <td>${entry.message}</td>
            </tr>
        `).join('')}
        </tbody>
    </table>
</body>
</html>`;

                const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url); // Uvoln√≠ URL objekt
                originalConsole.log('‚úÖ Log byl exportov√°n do souboru:', filename);
            });
        } else {
            originalConsole.error('‚ùå Tlaƒç√≠tko pro export log≈Ø (jirik-export-button) nebylo nalezeno!');
        }

        // Aktualizace zobrazen√≠ p≈ôi inicializaci (zaji≈°≈•uje zobrazen√≠ ji≈æ existuj√≠c√≠ch log≈Ø)
        originalConsole.log('üîÑ Spou≈°t√≠m √∫vodn√≠ updateLogDisplay pro zobrazen√≠ existuj√≠c√≠ch log≈Ø.');
        updateLogDisplay();

        originalConsole.log('üî• Modal pro konzolov√Ω log (Ji≈ô√≠k) byl √∫spƒõ≈°nƒõ inicializov√°n!');

        // Glob√°ln√≠ funkce pro ruƒçn√≠ otev≈ôen√≠ modalu (m≈Ø≈æe≈° volat z konzole pro debug)
        // Definov√°na ZDE, aby mƒõla p≈ô√≠stup k updateLogDisplay a dal≈°√≠m promƒõnn√Ωm z DOMContentLoaded
        window.openJirikModal = function() { // P≈ôejmenov√°no na openJirikModal
            originalConsole.log('üîµ Glob√°ln√≠ funkce window.openJirikModal() byla vol√°na.');
            const modal = document.getElementById('jirik-modal'); // P≈ôejmenov√°no na jirik-modal
            if (modal) {
                originalConsole.log(`üü¢ Zobrazuji modal (ID: ${modal.id}) p≈ôid√°n√≠m t≈ô√≠dy 'jirik-visible'. Aktu√°ln√≠ t≈ô√≠dy: ${modal.className}`);
                modal.classList.add('jirik-visible');
                originalConsole.log(`‚úÖ T≈ô√≠da 'jirik-visible' p≈ôid√°na. Aktu√°ln√≠ t≈ô√≠dy: ${modal.className}`);
                updateLogDisplay(); // Nyn√≠ je updateLogDisplay v dosahu
                originalConsole.log('üîÑ updateLogDisplay vol√°n z glob√°ln√≠ funkce.');
                originalConsole.log('Modal (Ji≈ô√≠k) otev≈ôen ruƒçnƒõ!');
            } else {
                originalConsole.error('‚ùå Modal (Ji≈ô√≠k) nebyl nalezen p≈ôi pokusu o ruƒçn√≠ otev≈ôen√≠ z glob√°ln√≠ funkce!');
            }
        };
    });
})(); // Konec IIFE
